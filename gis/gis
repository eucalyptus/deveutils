#!/bin/bash
CMD=$0
PRINTSUB=$(dirname $(readlink -f ${CMD}))/gis-print-sub
REPO_DIR=$(git rev-parse --show-toplevel)
if ! git -c color.ui=always version >/dev/null 2>&1; then 
  GIT="git"
elif [ -t 1 ]; then 
  GIT="git -c color.ui=always"
else
  GIT="git -c color.ui=auto"
fi
GIT_CHANGED=" status -s --untracked=no"
GIT_UNCOMMITTED=" status -s --untracked=all | egrep -v '^\?\?'"
if [ -e ${REPO_DIR}/../.gitmodules ]; then
  REPO_DIR=$(readlink -f ${REPO_DIR}/../)

fi
SUBWIDTH=$(cd ${REPO_DIR}; git submodule | awk '{if(max<length($2)) max=length($2)}END{print max+2}')
COLS=$(tput cols)
WIDTH=$(echo "${COLS}-${SUBWIDTH}" | bc)
RED="\E[1;31m"
RESET="\E[0m"
WHITE="\E[1;37m"
GREEN="\E[0;32m"
ERRMSG=1

UNSAFECOMMANDS="commit rebase merge show notes"
function unsafeCommand() {
  for c in ${UNSAFECOMMANDS}; do
    if echo "${@}" | grep $c; then
      return 0
    fi
  done
  return 1
}

function checkBranches() {
  if (cd ${REPO_DIR}; 
      git status -sb  --untracked=no --ignore-submodules=all;
#      git submodule foreach git status -sb  --untracked=no --ignore-submodules=all
     ) | 
     egrep '^\#\#' | sort | uniq -c | wc -l | egrep '^[^1]$' >/dev/null; then
    tput bold
    echo -n "==== "
    tput setaf 1
    echo -n "MUST FIX: Mismatched branches present!"
    tput setaf 7
    echo " ===="
    tput sgr0
    (cd ${REPO_DIR}; 
      for mod in $(git submodule | awk '{print $2}'); do
        ( cd $mod;
          printRedir $mod ${GIT} status -sb --untracked=no --ignore-submodules=untracked
        )
      done
      mod=internal
      printRedir $mod ${GIT} status -sb --untracked=no --ignore-submodules=untracked
    )
    exit 4
  else
    return 0
  fi 
}

function checkModules() {
  if (cd ${REPO_DIR}; git status -s --untracked=no --ignore-submodules=dirty ) | grep '.' >/dev/null; then
    tput bold
    echo -n "==== "
    tput setaf 1
    echo -n "MUST FIX: Uncommitted submodules present!"
    tput setaf 7
    echo " ===="
    tput sgr0
    (cd ${REPO_DIR}; 
      for mod in $(git submodule | awk '{print $2}'); do
        printRedir $mod ${GIT} status -s --untracked=no --ignore-submodules=dirty $mod
        printRedir $mod ${GIT} diff --ignore-submodules=dirty $mod
      done
    )
    ERRMSG=$((ERRMSG*4))
    return 4
  else
    return 0
  fi 
}

function checkUncommitted() {
  if submodulesExec status -s --untracked=no --ignore-submodules=all | grep '.' >/dev/null; then
    tput bold
    echo -n "==== "
    tput setaf 1
    echo -n "MUST FIX: Uncommitted changes present!"
    tput setaf 7
    echo " ===="
    tput sgr0
    submodulesExec status -s --untracked=no --ignore-submodules=all 
    ERRMSG=$((ERRMSG*4))
    return 2
  fi
}

function stripAnsi() {
  echo -en "${@}" | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g;s/\x1B\(B//g"
}

EMPTY="                                                                                                                                                                             "
function printSub() {
  COLOR=${GREEN}
  if [[ "$1" == "ERROR" ]]; then
    shift
    COLOR=${RED}
  fi
  SUFFIX=$1
  shift
  while IFS= read -e -r -t 10 line; do
    line=$(echo -en "${line}" | sed 's/\t/        /g')
    cline=$(stripAnsi "${line}")
    len=$(echo "${line}" | wc -c)
    clen=$(echo "${cline}" | wc -c)
    sublen=${#SUFFIX}
    lendiff=$((len-clen))
    len=$((len%COLS))
    clen=$((clen%COLS))
    subpad=$((SUBWIDTH-1))
    pad=$((COLS-len-SUBWIDTH+lendiff))
#    line=${line//\n/}
    fulllen=$((len+pad+subpad))
    midline=0
    if [ ${subpad} -gt 0 ] && [ ${pad} -gt 0 ]; then
      OUT=$(printf "%-${len}.${len}s%-${pad}.${pad}s" "${line}" "${EMPTY}")
      OUT=${OUT}$(printf "${COLOR}#${WHITE}%${subpad}.${subpad}s${RESET}" "${SUFFIX}")
    else
      OUT=$(printf "%-${len}.${len}s" "${line}")
    fi
    printf -- "${OUT//%/%%}\n"
    if [[ -n ${DEBUG} ]]; then
      OUT=$(printf "%-${len}.${len}s|%-${pad}.${pad}s|" "${cline}" "")
      printf "%-$((COLS-SUBWIDTH)).$((COLS-SUBWIDTH))s|${COLOR}#${WHITE}%${subpad}.${subpad}s${RESET}\n" "${OUT}" "${SUFFIX}"
      printf "$clen/$len+$pad=$((COLS-SUBWIDTH))#$subpad $((clen+pad+sublen))/$fulllen\n"
    fi
    OUT=""
  done
}

function printRedir() {
  MODULE=$1
  shift
  {
    {
      ${@} 3>&- |
      printSub  ${MODULE} 2>&3 3>&-
    } 2>&1 >&4 4>&- |
    printSub ERROR ${MODULE} 3>&- 4>&-
  } 3>&2 4>&1
}

function topExec() {
  ( cd ${REPO_DIR}
    if ! unsafeCommand ${1}; then
      printRedir $(basename ${REPO_DIR}) ${GIT} "${@}"
    else
      ${GIT} "${@}"
    fi
  )
}

function submodulesExec() {
  ( cd ${REPO_DIR}
    for m in $(git submodule | awk '{print $2}'); do
      ( cd $m
        if ! unsafeCommand ${1}; then
          printRedir $m ${GIT} "${@}"
        else
          ${GIT} "${@}"
        fi
      )
    done
    if ! unsafeCommand ${1}; then
      printRedir $(basename ${REPO_DIR}) ${GIT} "${@}"
    else
      ${GIT} "${@}"
    fi
  )
}

if complete | egrep ' gis$'; then
  (
  echo "Bash completion command to give git command completion:"
  echo
  echo "  complete -o bashdefault -o default -o nospace -F _git gis"
  echo
  echo "- Either add this to your ~/.bashrc"
  echo "- Stuff it into a file in /etc/bash_completion.d/gis" 
  ) >&2
  exit 1
fi

# ARGS=$(getopt -o ftcd -l "force,top,check,debug" -- "$@");
# if [[ $? -ne 0 ]] || [[ ${#} -eq 0 ]];
if [[ $? -ne 0 ]] || [[ ${#} -eq 0 ]];
then
  echo "Usage: gis [options] git-command [git-command-args]"
  echo -e "\t-f|--force\tForce; skip safety checks."
  echo -e "\t-t|--top\tExecute the command at the top-most git repo (parent of all modules)."
  echo -e "\t-c|--check\tCheck; only do safety checks."
  echo -e "\t-f|--force\tDebug; print debug info."
  exit 1
fi
# eval set -- "$ARGS";

DEBUG=
FORCE=
GOTOP=
CHECK=
case "$1" in
  -f|--force)
    shift;
    FORCE=1
  ;;
  -d|--debug)
    shift;
    DEBUG=1
  ;;
  -t|--top)
    shift;
    GOTOP=1
  ;;
  -c|--check)
    shift;
    CHECK=1
  ;;
  --)
    shift;
    break;
    ;;
esac

if [[ -n ${GOTOP} ]]; then
  topExec "${@}"
elif declare -F $1 >/dev/null; then
  C=$1
  shift
  $C ${@}
else
  if [[ -z ${FORCE} ]]; then
    checkBranches >&2
    checkModules >&2
    checkUncommitted >&2
    if [[ ${ERRMSG} -gt 1 ]] || [[ -n ${CHECK} ]]; then
      exit $ERRMSG
    fi
  fi
  submodulesExec "${@}"
fi
